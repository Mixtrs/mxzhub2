local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "DribbleBoyz",
    Icon = 0,  -- No icon
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    Theme = "Serenity",  -- You can customize themes
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "MXZ", -- Custom folder name
        FileName = "HUB"
    },
    KeySystem = true,  -- If you need a key system
    KeySettings = {
        Title = "Key System",
        Subtitle = "Enter your key",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        Key = {"Muzz"}  -- The accepted key for the system
    }
})

-- Create tabs
local TabMain = Window:CreateTab("Main", "rewind")
local TabDribble = Window:CreateTab("Dribble Moves", "rewind")
local TabSettings = Window:CreateTab("Settings", "rewind")

-- Variables
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local moveDirConnection
local InfiniteStamina = false
local toggleValue_Main = false
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remotes = ReplicatedStorage:FindFirstChild("Events")
if not Remotes then return end
local Dribble = Remotes:FindFirstChild("Dribble")
if not Dribble then return end


local function checkBehind()
    local player = game.Players.LocalPlayer
    local valuesFolder = player:FindFirstChild("Values")
    if not valuesFolder then return end
    local hand = valuesFolder:FindFirstChild("Hand")
    if not hand then return end
    if hand:IsA("BoolValue") then
        if hand.Value then
            Dribble:FireServer({Enum.KeyCode.C, Enum.KeyCode.X})
        else
            Dribble:FireServer({Enum.KeyCode.Z, Enum.KeyCode.X})
        end
    end
end

local function checkSpin()
    local player = game.Players.LocalPlayer
    local valuesFolder = player:FindFirstChild("Values")
    if not valuesFolder then return end
    local hand = valuesFolder:FindFirstChild("Hand")
    if not hand then return end
    if hand:IsA("BoolValue") then
        if hand.Value then
            Dribble:FireServer({Enum.KeyCode.C, Enum.KeyCode.X, Enum.KeyCode.Z})
        else
            Dribble:FireServer({Enum.KeyCode.Z, Enum.KeyCode.X, Enum.KeyCode.C})
        end
    end
end

local function checkSnatch()
    local player = game.Players.LocalPlayer
    local valuesFolder = player:FindFirstChild("Values")
    if not valuesFolder then return end
    local hand = valuesFolder:FindFirstChild("Hand")
    if not hand then return end
    if hand:IsA("BoolValue") then
        if hand.Value then
            Dribble:FireServer({Enum.KeyCode.Z, Enum.KeyCode.C})
        else
            Dribble:FireServer({Enum.KeyCode.C, Enum.KeyCode.Z})
        end
    end
end

spawn(function()
    while true do
        if InfiniteStamina then
            local fill = game.Workspace:WaitForChild("Meter"):WaitForChild("SurfaceGui"):WaitForChild("Stamina"):WaitForChild("Fill")

            if fill.AbsoluteSize.X <= 233 then
                fill.Size = UDim2.new(1, 0, 1, 0)
            end
        end
        wait(0.1)
    end
end)

local Toggle = TabMain:CreateToggle({
    Name = "AutoGreen",
    CurrentValue = false,
    Flag = "AutoGreen", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        toggleValue_Main = Value
        if toggleValue_Main then
            while toggleValue_Main do
                wait()
                local meteaa = game.Players.LocalPlayer.Character.HumanoidRootPart.PlayerMeter
                if meteaa.Enabled == true then
                    meteaa.Fill.UIGradient.Offset = Vector2.new(0, -1)
                end
            end
        end
    end
})

local Toggle = TabMain:CreateToggle({
    Name = "Infinite Stamina",
    CurrentValue = false,
    Flag = "InfiniteStamina",
    Callback = function(value)
        InfiniteStamina = value -- Update toggle state
        if InfiniteStamina then
            Rayfield:Notify({
                Title = "Infinite Stamina",
                Content = "Infinite Stamina is now active.",
                Duration = 5,
                Image = 4483362458, -- Replace with your desired icon ID
            })
        else
            Rayfield:Notify({
                Title = "Infinite Stamina",
                Content = "Infinite Stamina is now inactive.",
                Duration = 5,
                Image = 4483362458,
            })
        end
    end
})

local Keybind = TabDribble:CreateKeybind({
    Name = "Momentum",
    CurrentKeybind = "Q",
    HoldToInteract = false,
    Flag = "Keybind1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(value)
        checkSnatch()
    end
})

local Keybind = TabDribble:CreateKeybind({
    Name = "Spin",
    CurrentKeybind = "Q",
    HoldToInteract = false,
    Flag = "Keybind2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(value)
        checkSpin()
    end
})

local Keybind = TabDribble:CreateKeybind({
    Name = "Behind The Back",
    CurrentKeybind = "Q",
    HoldToInteract = false,
    Flag = "Keybind3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(value)
        checkBehind()
    end
})

local Button = TabSettings:CreateButton({
    Name = "Exit Hub",
    Callback = function()
        Rayfield:Destroy()  -- To destroy the Rayfield window
    end
})

