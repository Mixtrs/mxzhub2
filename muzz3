-- Initialize Rayfield library and create the window
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "DribbleBoyz",
    LoadingTitle = "Loading...",
    LoadingSubtitle = "Please Wait...",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "RayfieldTest",
        FileName = "Config"
    },
    Discord = {
        Enabled = false,
    },
    Keybind = Enum.KeyCode.LeftControl, -- Default keybind to open the UI
    IntroText = "RHL",
    IntroIcon = "rbxassetid://6023426929"
})

-- Create Tabs
local MainTab = Window:CreateTab("Main Options", 4483362458)
local DribbleTab = Window:CreateTab("Dribble Moves", 4483362460)
local SettingsTab = Window:CreateTab("Settings", 4483362461)

-- Variables
local accelerationEnabled = false
local accelerationAmount = 0.01  -- Default acceleration multiplier
local baseWaitTimer = 0.01
local minSpeed = 16
local maxSpeed = 50
local waitTimer = baseWaitTimer
local fpsUnlockEnabled = false
local decalsYeeted = false -- Leaving this on makes games look bad but fps goes up by at least 20.
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local moveDirConnection

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local localPlayer = Players.LocalPlayer

local Remotes = ReplicatedStorage:FindFirstChild("Events")
if not Remotes then
    return
end

local Dribble = Remotes:FindFirstChild("Dribble")
if not Dribble then
    return
end

-- Function to apply acceleration
local function applyAcceleration()
    if accelerationEnabled then
        if moveDirConnection then moveDirConnection:Disconnect() end
        local moveDirDB = false

        local function accelerate()
            if humanoid.MoveDirection.magnitude > 0 and not moveDirDB and humanoid.WalkSpeed < maxSpeed then
                moveDirDB = true
                while humanoid.MoveDirection.magnitude > 0 and humanoid.WalkSpeed < maxSpeed do
                    humanoid.WalkSpeed = humanoid.WalkSpeed + accelerationAmount
                    wait(waitTimer)
                    waitTimer = waitTimer / 2.5
                end
                moveDirDB = false
            elseif humanoid.MoveDirection.magnitude == 0 then
                waitTimer = baseWaitTimer
                humanoid.WalkSpeed = minSpeed
            end
        end

        moveDirConnection = humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(accelerate)
    else
        if moveDirConnection then moveDirConnection:Disconnect() end
        waitTimer = baseWaitTimer
        humanoid.WalkSpeed = minSpeed
    end
end

-- Function to calculate the distance between two points in 3D space
function calculateDistance(point1, point2)
    return (point1 - point2).Magnitude
end

-- Function to find the closest player
function findClosestPlayer()
    local closestPlayer = nil
    local closestDistance = math.huge

    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local myCharacter = game.Players.LocalPlayer.Character
            local myPosition = myCharacter and myCharacter:FindFirstChild("HumanoidRootPart").Position
            local opponentPosition = player.Character.HumanoidRootPart.Position

            if myPosition then
                local distance = calculateDistance(myPosition, opponentPosition)

                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

-- Add toggles and sliders to the UI
MainTab:CreateToggle({
    Name = "Enable Acceleration",
    Default = false,
    Callback = function(value)
        accelerationEnabled = value
        applyAcceleration()
    end
})

MainTab:CreateSlider({
    Name = "Acceleration",
    Min = 0,
    Max = 25,
    Default = accelerationAmount,
    Callback = function(value)
        if accelerationEnabled then
            accelerationAmount = value
        end
    end
})

-- Keybinds for dribble moves
DribbleTab:CreateKeybind({
    Name = "Momentum",
    CurrentKeybind = "Q",
    HoldToInteract = false,
    Flag = "Keybind1", -- The flag for saving this in the config
    Callback = function(Keybind)
        -- Action when keybind is pressed
        -- Example of checking whether it's being held or not
    end,
})

DribbleTab:CreateKeybind({
    Name = "Spin",
    CurrentKeybind = "E",
    HoldToInteract = false,
    Flag = "Keybind2",
    Callback = function(Keybind)
        -- Action when keybind is pressed
    end,
})

DribbleTab:CreateKeybind({
    Name = "Behind The Back",
    CurrentKeybind = "R",
    HoldToInteract = false,
    Flag = "Keybind3",
    Callback = function(Keybind)
        -- Action when keybind is pressed
    end,
})

-- Settings Tab for exit functionality
SettingsTab:CreateButton({
    Name = "Exit Swerve",
    Callback = function()
        Rayfield:Destroy()
    end
})
