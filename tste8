-- Load Rayfield UI library
local Rayfield = loadstring(game:HttpGet("https://raw.githubusercontent.com/axstin/rayfield/main/source.lua"))()

-- Create the main window
local Window = Rayfield:CreateWindow({
    Name = "DribbleBoyz", -- Title of the window
    LoadingTitle = "Loading...",
    LoadingSubtitle = "Please wait",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "RayfieldTest", -- Folder for configuration saving
        FileName = "Config" -- Configuration file name
    }
})

-- Create Tabs
local MainTab = Window:CreateTab("Main Options", 4483362458)
local DribbleTab = Window:CreateTab("Dribble Moves", 4483362458)
local SettingsTab = Window:CreateTab("Settings", 4483362458)

-- Variables
local accelerationEnabled = false
local accelerationAmount = 0.01  -- Default acceleration multiplier
local baseWaitTimer = 0.01
local minSpeed = 16
local maxSpeed = 50
local waitTimer = baseWaitTimer
local fpsUnlockEnabled = false
local decalsYeeted = false -- Leave this to speed up FPS, but it may cause bad visuals
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local moveDirConnection

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remotes = ReplicatedStorage:FindFirstChild("Events")
if not Remotes then return end

local Dribble = Remotes:FindFirstChild("Dribble")
if not Dribble then return end

-- Function to apply acceleration
local function applyAcceleration()
    if accelerationEnabled then
        if moveDirConnection then moveDirConnection:Disconnect() end
        local moveDirDB = false

        local function accelerate()
            if humanoid.MoveDirection.magnitude > 0 and not moveDirDB and humanoid.WalkSpeed < maxSpeed then
                moveDirDB = true
                while humanoid.MoveDirection.magnitude > 0 and humanoid.WalkSpeed < maxSpeed do
                    humanoid.WalkSpeed = humanoid.WalkSpeed + accelerationAmount
                    wait(waitTimer)
                    waitTimer = waitTimer / 2.5
                end
                moveDirDB = false
            elseif humanoid.MoveDirection.magnitude == 0 then
                waitTimer = baseWaitTimer
                humanoid.WalkSpeed = minSpeed
            end
        end

        moveDirConnection = humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(accelerate)
    else
        if moveDirConnection then moveDirConnection:Disconnect() end
        waitTimer = baseWaitTimer
        humanoid.WalkSpeed = minSpeed
    end
end

-- Main Options Tab: Enable Acceleration Toggle
MainTab:CreateToggle({
    Name = "Enable Acceleration",
    CurrentValue = false,
    Flag = "EnableAcceleration", -- Unique flag for configuration saving
    Callback = function(Value)
        accelerationEnabled = Value
        applyAcceleration()
    end,
})

-- Main Options Tab: Acceleration Slider
MainTab:CreateSlider({
    Name = "Acceleration",
    Min = 0,
    Max = 25,
    Default = accelerationAmount,
    Flag = "AccelerationSlider", -- Unique flag for configuration saving
    Callback = function(Value)
        if accelerationEnabled then
            accelerationAmount = Value
        end
    end,
})

-- Main Options Tab: AutoGreen Toggle
MainTab:CreateToggle({
    Name = "AutoGreen",
    CurrentValue = false,
    Flag = "AutoGreenToggle", -- Unique flag for configuration saving
    Callback = function(Value)
        -- Function to execute when toggle is pressed
        if Value then
            while Value do
                wait()
                local meter = player.Character.HumanoidRootPart.PlayerMeter
                if meter.Enabled == true then
                    meter.Fill.UIGradient.Offset = Vector2.new(0, -1)
                end
            end
        end
    end
})

-- Dribble Tab: Keybinds for Dribble Moves

-- Momentum Keybind
DribbleTab:CreateKeybind({
    Name = "Momentum",
    CurrentKeybind = "Q", -- Default keybind
    HoldToInteract = false, -- Keybind will execute when pressed
    Flag = "MomentumKeybind", -- Unique flag for configuration saving
    Callback = function(Keybind)
        -- Check hand for momentum action
        local hand = player:FindFirstChild("Values") and player.Values:FindFirstChild("Hand")
        if hand and hand:IsA("BoolValue") then
            if hand.Value then
                Dribble:FireServer({Enum.KeyCode.C, Enum.KeyCode.X})
            else
                Dribble:FireServer({Enum.KeyCode.Z, Enum.KeyCode.X})
            end
        end
    end,
})

-- Spin Keybind
DribbleTab:CreateKeybind({
    Name = "Spin",
    CurrentKeybind = "E", -- Default keybind
    HoldToInteract = false,
    Flag = "SpinKeybind", -- Unique flag for configuration saving
    Callback = function(Keybind)
        -- Check hand for spin action
        local hand = player:FindFirstChild("Values") and player.Values:FindFirstChild("Hand")
        if hand and hand:IsA("BoolValue") then
            if hand.Value then
                Dribble:FireServer({Enum.KeyCode.C, Enum.KeyCode.X, Enum.KeyCode.Z})
            else
                Dribble:FireServer({Enum.KeyCode.Z, Enum.KeyCode.X, Enum.KeyCode.C})
            end
        end
    end,
})

-- Behind The Back Keybind
DribbleTab:CreateKeybind({
    Name = "Behind The Back",
    CurrentKeybind = "R", -- Default keybind
    HoldToInteract = false,
    Flag = "BehindTheBackKeybind", -- Unique flag for configuration saving
    Callback = function(Keybind)
        -- Check hand for behind-the-back action
        local hand = player:FindFirstChild("Values") and player.Values:FindFirstChild("Hand")
        if hand and hand:IsA("BoolValue") then
            if hand.Value then
                Dribble:FireServer({Enum.KeyCode.Z, Enum.KeyCode.C})
            else
                Dribble:FireServer({Enum.KeyCode.C, Enum.KeyCode.Z})
            end
        end
    end,
})

-- Settings Tab: Exit Button
SettingsTab:CreateButton({
    Name = "Exit Swerve",
    Callback = function()
        Rayfield:Destroy() -- Close the Rayfield UI
    end,
})

-- Final touches: Apply settings and start UI
Rayfield:Initialize()
