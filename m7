local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "DribbleBoyz",
    Icon = 0,  -- No icon
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    Theme = "Serenity",  -- You can customize themes
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "MXZ", -- Custom folder name
        FileName = "HUB"
    },
    KeySystem = true,  -- If you need a key system
    KeySettings = {
        Title = "Key System",
        Subtitle = "Enter your key",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        Key = {"Muzz"}  -- The accepted key for the system
    }
})

-- Create tabs
local TabMain = Window:CreateTab("Main", "rewind")
local TabDribble = Window:CreateTab("Dribble Moves", "rewind")
local TabSettings = Window:CreateTab("Settings", "rewind")

-- Variables
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local moveDirConnection
local toggleValue_Main = false
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remotes = ReplicatedStorage:FindFirstChild("Events")
if not Remotes then return end
local Dribble = Remotes:FindFirstChild("Dribble")
if not Dribble then return end
local UserInputService = game:GetService("UserInputService")
local Player = game.Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local baseWaitTimer = 0.1
local waitTimer = baseWaitTimer
local minSpeed = 16
local maxSpeed = 20
local accelerationAmount = 0.5
local accelerationEnabled = false
local moveDirConnection
local toggleEnabled = true -- Controlled by the toggle UI

-- Function to apply acceleration
local function applyAcceleration()
    if accelerationEnabled and toggleEnabled then
        if moveDirConnection then moveDirConnection:Disconnect() end
        local moveDirDB = false

        local function accelerate()
            if Humanoid and Humanoid.MoveDirection.magnitude > 0 and not moveDirDB and Humanoid.WalkSpeed < maxSpeed then
                moveDirDB = true
                while Humanoid and Humanoid.MoveDirection.magnitude > 0 and Humanoid.WalkSpeed < maxSpeed do
                    Humanoid.WalkSpeed = Humanoid.WalkSpeed + accelerationAmount
                    wait(waitTimer)
                    waitTimer = waitTimer / 1.5
                end
                moveDirDB = false
            elseif Humanoid and Humanoid.MoveDirection.magnitude == 0 then
                waitTimer = baseWaitTimer
                Humanoid.WalkSpeed = minSpeed
            end
        end

        if Humanoid then
            moveDirConnection = Humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(accelerate)
        end
    else
        if moveDirConnection then moveDirConnection:Disconnect() end
        waitTimer = baseWaitTimer
        if Humanoid then
            Humanoid.WalkSpeed = minSpeed
        end
    end
end

-- Input handling
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if (input.KeyCode == Enum.KeyCode.LeftShift or input.KeyCode == Enum.KeyCode.ButtonL2) and toggleEnabled then
        accelerationEnabled = true
        applyAcceleration()
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.LeftShift or input.KeyCode == Enum.KeyCode.ButtonL2 then
        accelerationEnabled = false
        applyAcceleration()
    end
end)

local function checkBehind()
    local player = game.Players.LocalPlayer
    local valuesFolder = player:FindFirstChild("Values")
    if not valuesFolder then return end
    local hand = valuesFolder:FindFirstChild("Hand")
    if not hand then return end
    if hand:IsA("BoolValue") then
        if hand.Value then
            Dribble:FireServer({Enum.KeyCode.C, Enum.KeyCode.X})
        else
            Dribble:FireServer({Enum.KeyCode.Z, Enum.KeyCode.X})
        end
    end
end

local function checkSpin()
    local player = game.Players.LocalPlayer
    local valuesFolder = player:FindFirstChild("Values")
    if not valuesFolder then return end
    local hand = valuesFolder:FindFirstChild("Hand")
    if not hand then return end
    if hand:IsA("BoolValue") then
        if hand.Value then
            Dribble:FireServer({Enum.KeyCode.C, Enum.KeyCode.X, Enum.KeyCode.Z})
        else
            Dribble:FireServer({Enum.KeyCode.Z, Enum.KeyCode.X, Enum.KeyCode.C})
        end
    end
end

local function checkSnatch()
    local player = game.Players.LocalPlayer
    local valuesFolder = player:FindFirstChild("Values")
    if not valuesFolder then return end
    local hand = valuesFolder:FindFirstChild("Hand")
    if not hand then return end
    if hand:IsA("BoolValue") then
        if hand.Value then
            Dribble:FireServer({Enum.KeyCode.Z, Enum.KeyCode.C})
        else
            Dribble:FireServer({Enum.KeyCode.C, Enum.KeyCode.Z})
        end
    end
end

local Toggle = TabMain:CreateToggle({
    Name = "AutoGreen",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        toggleValue_Main = Value
        if toggleValue_Main then
            while toggleValue_Main do
                wait()
                local meteaa = game.Players.LocalPlayer.Character.HumanoidRootPart.PlayerMeter
                if meteaa.Enabled == true then
                    meteaa.Fill.UIGradient.Offset = Vector2.new(0, -1)
                end
            end
        end
    end
})

local Toggle = TabMain:CreateToggle({
    Name = "Enable Sprint",
    CurrentValue = true,
    Callback = function(value)
        toggleEnabled = value
        if not toggleEnabled then
            accelerationEnabled = false
            applyAcceleration() -- Reset speed to default when toggled off
        end
    end,
})

local Keybind = TabDribble:CreateKeybind({
    Name = "Momentum",
    CurrentKeybind = "Q",
    HoldToInteract = false,
    Flag = "Keybind1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(value)
        checkSnatch()
    end
})

local Keybind = TabDribble:CreateKeybind({
    Name = "Spin",
    CurrentKeybind = "Q",
    HoldToInteract = false,
    Flag = "Keybind2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(value)
        checkSpin()
    end
})

local Keybind = TabDribble:CreateKeybind({
    Name = "Behind The Back",
    CurrentKeybind = "Q",
    HoldToInteract = false,
    Flag = "Keybind3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(value)
        checkBehind()
    end
})

local Button = TabSettings:CreateButton({
    Name = "Exit Hub",
    Callback = function()
        Rayfield:Destroy()  -- To destroy the Rayfield window
    end
})

